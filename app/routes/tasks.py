# app/routes/tasks.py
from fastapi import APIRouter, HTTPException, status, Query
from typing import List
from app.schemas import ReanalyseRequest, TaskLaunchResponse, TaskStatus
from app.celery_tasks import moissonner, reanalyser_articles_nlp
import os

router = APIRouter(
    tags=["T√¢ches / Celery"]
)

# Tables autoris√©es pour la r√©analyse
TASK_TABLES = ["articles_openalex", "articles_oai"]

@router.post(
    "/moissonner",
    summary="Lance le moissonnage Celery",
    status_code=status.HTTP_202_ACCEPTED,
    response_model=TaskLaunchResponse,
    responses={
        202: {"description": "T√¢che de moissonnage d√©marr√©e", "content": {"application/json": {"example": {"message": "‚úÖ Moissonnage lanc√© via Celery", "task_id": "abcd1234"}}}},
        500: {"description": "Erreur interne lors du lancement de la t√¢che"}
    }
)
def lancer_moissonnage() -> TaskLaunchResponse:
    """Lance une t√¢che Celery pour moissonner les articles."""
    try:
        task = moissonner.delay()
        return TaskLaunchResponse(message="‚úÖ Moissonnage lanc√© via Celery", task_id=task.id)
    except Exception as e:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))

@router.post(
    "/reanalyser",
    summary="Lance la r√©analyse NLP Celery",
    status_code=status.HTTP_202_ACCEPTED,
    response_model=TaskLaunchResponse,
    responses={
        202: {"description": "T√¢che de r√©analyse lanc√©e", "content": {"application/json": {"example": {"message": "üîÅ R√©analyse NLP lanc√©e pour articles_openalex", "limit": 50, "task_id": "efgh5678"}}}},
        400: {"description": "Requ√™te invalide (table non autoris√©e)"},
        500: {"description": "Erreur interne lors du lancement de la t√¢che"}
    }
)
def relancer_analyse_nlp(request: ReanalyseRequest) -> TaskLaunchResponse:
    """Lance une t√¢che Celery pour r√©analyser les articles (NLP)."""
    if request.table not in TASK_TABLES:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"Table non autoris√©e. Tables valides : {', '.join(TASK_TABLES)}"
        )
    try:
        task = reanalyser_articles_nlp.delay(request.table, request.limit)
        return TaskLaunchResponse(message=f"üîÅ R√©analyse NLP lanc√©e pour {request.table}", limit=request.limit, task_id=task.id)
    except Exception as e:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))

@router.get(
    "/status",
    summary="Statut des t√¢ches Celery planifi√©es",
    response_model=TaskStatus,
    responses={
        200: {"description": "Liste des t√¢ches planifi√©es", "content": {"application/json": {"example": {"planned_tasks": ["moissonner.articles", "reanalyser.batch"], "description": "T√¢ches ex√©cut√©es chaque nuit via Celery Beat."}}}},
        500: {"description": "Erreur interne lors de la r√©cup√©ration du statut"}
    }
)
def get_tasks_status() -> TaskStatus:
    """Liste les t√¢ches Celery planifi√©es."""
    try:
        return TaskStatus(
            planned_tasks=["moissonner.articles", "reanalyser.batch"],
            description="Ces t√¢ches sont ex√©cut√©es chaque nuit via Celery Beat."
        )
    except Exception as e:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))

@router.get(
    "/logs",
    summary="R√©cup√®re les derni√®res lignes du log Celery",
    responses={
        200: {"description": "Derni√®res lignes de log", "content": {"application/json": {"example": {"logs": ["INFO Task succeeded...", "ERROR Something failed..."]}}}},
        500: {"description": "Erreur lecture fichier de log"}
    }
)
def lire_logs(limit: int = Query(50, ge=1, le=500, description="Nombre de lignes √† retourner")):
    """Renvoie les derni√®res lignes du fichier de log Celery."""
    log_path = os.getenv("CELERY_LOG_PATH", "logs/celery_tasks.log")
    if not os.path.exists(log_path):
        return {"message": "Aucun log trouv√©."}
    try:
        with open(log_path, "r", encoding="utf-8") as f:
            lines = f.readlines()[-limit:]
        return {"logs": lines}
    except Exception as e:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=str(e))
